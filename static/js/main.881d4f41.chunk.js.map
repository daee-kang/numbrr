{"version":3,"sources":["GameLogic.ts","Components/Timer.tsx","Components/Score.tsx","Components/Game.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GameLogic","generateNumbers","numbers","i","MAX_GENERATE","push","Math","floor","random","getAccuracy","correct","incorrect","getNpm","time","getEmoji","getDescription","this","Timer","timeLeft","setTimeLeft","gameStart","setGameOver","style","useEffect","intervalId","setInterval","clearInterval","Meter","value","caption","className","trunc","Score","gameLogic","resetGame","onClick","flex","current","width","margin","Game","game","useRef","useState","setNumbers","usedNumbers","setUsedNumbers","setGameStart","gameOver","npm","setNpm","accuracy","setAccuracy","setIncorrect","setCorrect","setTime","isFocused","setFocused","input","React","timerKey","setTimerKey","a","n","console","log","focus","type","ref","onKeyDown","event","num","parseInt","key","isNaN","nums","used","shift","onFocus","onBlur","size","strokeWidth","isPlaying","duration","colors","fontSize","color","App","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.881d4f41.chunk.js","sourcesContent":["export default class GameLogic {\n  /*\n  we really don't have to hold state and members here, the game is \n  pretty simple that we can just hold state in the components but \n  handle SOME functionality here, this is more of just a helper\n  class in a way B-)\n  */\n  static MAX_GENERATE = 500;\n\n  constructor() {\n    this.generateNumbers();\n  }\n\n  generateNumbers = () => {\n    let numbers: number[] = []\n    for (let i = 0; i < GameLogic.MAX_GENERATE; i++) {\n      numbers.push(Math.floor(Math.random() * 10));\n    }\n    return numbers;\n  };\n\n  getAccuracy = (correct: number, incorrect: number) => {\n    if (correct + incorrect === 0) return 0;\n    return (correct / (correct + incorrect)) * 100;\n  };\n\n  getNpm = (correct: number, time?: number) => {\n    //TO-DO: penalty??\n    return correct;\n  };\n\n  getEmoji = (correct: number) => {\n    if (correct < 30) {\n      return '⚰️'\n    } else if (correct < 70) {\n      return '🐢';\n    } else if (correct < 110) {\n      return '🚶‍♀️';\n    } else if (correct < 150) {\n      return '🐕';\n    } else if (correct < 200) {\n      return '🏇';\n    } else {\n      return '🐆'\n    }\n  }\n\n  getDescription = (correct: number) => {\n    if (correct < 20) {\n      return 'bro are you even alive?'\n    } else if (correct < 70) {\n      return 'Well... you type pretty slow, keep practicing.';\n    } else if (correct < 110) {\n      return 'Not bad, you are pretty average. It could be better!';\n    } else if (correct < 150) {\n      return `Okay, you're movin, I see you 👀, not fast yet but better than average.`;\n    } else if (correct < 200) {\n      return 'You are pretty fast at typing numbers, congratulations. You are one of the few with a unique talent of typing numbers.';\n    } else {\n      return 'Woah, you are insanely good at typing numbers for whatever reason.'\n    }\n  }\n\n\n};","import React, { useEffect, useState } from 'react';\nimport { TimerSettings, useTimer } from 'react-timer-hook';\n\ninterface Props {\n  timeLeft: number;\n  setTimeLeft: React.Dispatch<React.SetStateAction<number>>;\n  gameStart: boolean;\n  setGameOver: React.Dispatch<React.SetStateAction<boolean>>;\n  style?: React.CSSProperties\n}\n\nexport const Timer = ({ timeLeft, setTimeLeft, gameStart, setGameOver, style }: Props) => {\n\n  useEffect(() => {\n    //https://stackoverflow.com/questions/57137094/implementing-a-countdown-timer-in-react-with-hooks\n    if (!gameStart) return;\n\n    // exit early when we reach 0\n    if (!timeLeft) {\n      setGameOver(true);\n      return;\n    }\n\n    // save intervalId to clear the interval when the\n    // component re-renders\n    const intervalId = setInterval(() => {\n      setTimeLeft(timeLeft - 1);\n    }, 1000);\n\n    // clear interval on re-render to avoid memory leaks\n    return () => clearInterval(intervalId);\n    // add timeLeft as a dependency to re-rerun the effect\n    // when we update it\n  }, [timeLeft, gameStart]);\n\n  return (\n    <span style={style}>{timeLeft}</span>\n  );\n};\n","import React from 'react'\nimport GameLogic from '../GameLogic'\nimport './Score.css'\n\ninterface Props {\n  correct: number\n  incorrect: number\n  gameLogic: React.MutableRefObject<GameLogic>\n  resetGame: () => void\n}\n\ninterface meterProps {\n  value: number;\n  caption: string\n}\n\nconst Meter = ({ value, caption }: meterProps) => {\n  return (\n    <div className=\"meter-final\">\n      <div className=\"meter-val\">\n        {Math.trunc(value)}{caption === \"accuracy\" ? \"%\" : null}\n      </div>\n      <div className=\"meter-caption\">\n        {caption}\n      </div>\n    </div>\n  )\n}\n\nexport const Score = ({ correct, incorrect, gameLogic, resetGame }: Props) => {\n  return (\n    <div className=\"score-container\">\n      <div className=\"score-box\">\n        <button className=\"exit\" onClick={resetGame}>\n          ✖\n        </button>\n        <div style={{ flex: 2 }}>\n          <div className=\"center big-emoji\">\n            {gameLogic.current.getEmoji(correct)}\n          </div>\n          <div style={{ width: \"90%\", margin: \"auto\" }}>\n            {gameLogic.current.getDescription(correct)}\n          </div>\n        </div>\n\n\n        <div className=\"results\">\n          <Meter value={gameLogic.current.getNpm(correct)} caption={\"npm\"} />\n          |\n          <Meter value={incorrect} caption={\"missed\"} />\n          |\n          <Meter value={gameLogic.current.getAccuracy(correct, incorrect)} caption={\"accuracy\"} />\n        </div>\n      </div>\n    </div>\n  )\n}\n","import \"./Game.css\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport GameLogic from '../GameLogic';\nimport { Timer } from \"./Timer\";\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\nimport { Score } from \"./Score\";\n\nexport const Game = () => {\n  const game = useRef(new GameLogic());\n\n  const [numbers, setNumbers] = useState(game.current.generateNumbers());\n  const [usedNumbers, setUsedNumbers] = useState<number[]>([]);\n\n  const [gameStart, setGameStart] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n\n  const [npm, setNpm] = useState(0);\n  const [accuracy, setAccuracy] = useState(0);\n  const [incorrect, setIncorrect] = useState(0);\n  const [correct, setCorrect] = useState(0);\n  const [time, setTime] = useState(60);\n\n  const [isFocused, setFocused] = useState(false);\n  const input = React.useRef<HTMLInputElement>(null);\n\n  //we need a different key to \"restart\" the timer\n  const [timerKey, setTimerKey] = useState(`key${0}`);\n\n\n  const handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    let num = parseInt(event.key);\n\n    if (isNaN(num)) return;\n    if (gameOver) return;\n\n    if (!gameStart) setGameStart(true);\n\n    if (numbers[0] === num) {\n      let nums = numbers;\n      let used = usedNumbers;\n\n      used.push(nums.shift() ?? 0);\n      setNumbers(nums);\n      setUsedNumbers(used);\n      setCorrect(correct + 1);\n\n      return;\n    }\n    //incorrect\n    setIncorrect(incorrect + 1);\n  };\n\n  useEffect(() => {\n    //accuracy\n    let a = game.current.getAccuracy(correct, incorrect);\n    setAccuracy(a);\n\n    //npm\n    let n = game.current.getNpm(correct, time);\n    setNpm(n);\n  }, [time, correct, incorrect]);\n\n  useEffect(() => {\n    if (!gameOver) return;\n\n    setGameStart(false);\n    console.log(\"done\")\n  }, [gameOver])\n\n  const resetGame = () => {\n    setGameOver(false);\n    setGameStart(false);\n    setNpm(0);\n    setAccuracy(0);\n    setCorrect(0);\n    setIncorrect(0);\n    setTime(60);\n    setUsedNumbers([]);\n    setTimerKey(`key${Math.random() * 100000}`)\n    setNumbers(game.current.generateNumbers());\n  }\n\n  return (\n    <div className=\"game\">\n      {gameOver &&\n        <Score\n          correct={correct}\n          incorrect={incorrect}\n          gameLogic={game}\n          resetGame={resetGame}\n        />\n      }\n\n      <div\n        className={`number-box \n          ${isFocused ? \"number-box-focused\" : null}\n          ${gameOver ? \"blur\" : null}\n          `}\n        onClick={() => input.current!.focus()}\n      >\n        <span className=\"done-numbers\">\n          {usedNumbers}\n        </span>\n\n        <input type=\"text\"\n          ref={input}\n          onKeyDown={handleKeyPress}\n          className=\"invisible\"\n          onFocus={() => setFocused(true)}\n          onBlur={() => setFocused(false)}\n        />\n        <span className=\"type-numbers\">\n          {numbers}\n        </span>\n      </div>\n\n      <div className={`meter-container ${isFocused ? \"show\" : \"hide\"}`}>\n        <div className=\"timer\">\n          <CountdownCircleTimer\n            key={timerKey}\n            size={100}\n            strokeWidth={8}\n            isPlaying={gameStart}\n            duration={60}\n            colors={[\n              ['#40916c', 0.8],\n              ['#ffd166', 0.1],\n              ['#d62828', 0.1]\n            ]}>\n            <Timer\n              timeLeft={time}\n              setTimeLeft={setTime}\n              gameStart={gameStart}\n              setGameOver={setGameOver}\n              style={{ fontSize: \"2rem\", color: \"#2b2d42\" }}\n            />\n          </CountdownCircleTimer>\n        </div>\n\n\n        <div className=\"meter\">\n          <span className=\"box\">\n            <div className=\"center\">\n              {Math.trunc(npm)}\n            </div>\n            <span className=\"subtitle\">\n              numbers/min\n            </span>\n          </span>\n        </div>\n\n        <div className=\"meter\">\n          <span className=\"box\">\n            <div className=\"center\">\n              {incorrect}\n            </div>\n            <span className=\"subtitle\">\n              missed\n            </span>\n          </span>\n        </div>\n\n        <div className=\"meter\">\n          <span className=\"box\">\n            <div className=\"center\">\n              {Math.trunc(accuracy)}\n            </div>\n            <span className=\"subtitle\">\n              accuracy %\n            </span>\n          </span>\n        </div>\n      </div>\n\n\n    </div >\n  );\n};\n","import './App.css';\nimport { Game } from './Components/Game';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n      <div className=\"title\">\n        numbrr\n      </div>\n\n      <Game />\n\n      <div className=\"footer\">\n        <a href=\" https://github.com/daee-kang/numbrr\">\n          made by daee kang 😎\n        </a>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}